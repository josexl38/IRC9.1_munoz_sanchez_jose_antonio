name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: mi-app-docker
  REGISTRY: docker.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests
    
    - name: Run basic tests
      run: |
        # Test bÃ¡sico - verificar que la app se puede importar
        python -c "from src.app import app; print('âœ… App importada correctamente')"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        # Ejecutar contenedor en background
        docker run -d -p 5000:5000 --name test-container ${{ env.IMAGE_NAME }}:latest
        
        # Esperar que la app inicie
        sleep 10
        
        # Probar endpoint de health
        curl -f http://localhost:5000/health || exit 1
        
        # Limpiar
        docker stop test-container
        docker rm test-container
        
        echo "âœ… Tests del contenedor pasaron correctamente"
    
    - name: Save Docker image (opcional)
      run: |
        docker save ${{ env.IMAGE_NAME }}:latest | gzip > docker-image.tar.gz
    
    - name: Upload image artifact (opcional)
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: docker-image.tar.gz
        retention-days: 1

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
    - name: Deploy to Staging
      run: |
        echo "ğŸš€ Desplegando a Staging..."
        echo "AquÃ­ irÃ­an los comandos para desplegar a staging"
        echo "Por ejemplo: kubectl apply -f k8s-staging/ o docker-compose up"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to Production
      run: |
        echo "ğŸš€ Desplegando a ProducciÃ³n..."
        echo "AquÃ­ irÃ­an los comandos para desplegar a producciÃ³n"
        echo "Por ejemplo: kubectl apply -f k8s-prod/ o actualizaciones blue-green"

